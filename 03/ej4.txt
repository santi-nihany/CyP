En una mesa de exámenes hay 3 profesores que les deben tomar un examen oral a 30 alumnos
de acuerdo al orden de llegada. Cada examen es tomado por un único profesor. Cuando un
alumno llega, espera a que alguno de los profesores (cualquiera) lo llame y se dirige al
escritorio correspondiente a ese profesor, donde le tomará el examen; al terminar el
profesor le da la nota y el alumno se retira. Cuando un profesor está libre llama al siguiente
alumno. Nota: todos los procesos deben terminar su ejecución. 


process Alumno[id: 1..30]
{
    int idP, nota;
    Mesa.llegada(idP);
    Escritorio[idP].rendir(nota);
}

process Profesor[pId: 1..3]
{
    int nota;
    while(rendidos < 30){
        Mesa.proximo(pId);
        Escritorio[pId].esperarLLegada();
        nota = corregir();
        Escritorio[pId].entregarNota(nota, rendidos);
    }
}


Monitor Mesa 
{
    cola pLibres;
    cond esperaC;
    int esperando = 0, cantPLibres = 0, cantRendidos = 0;
    
    // ALUMNO
    procedure llegada(idP: out int){
        if(cantPLibres == 0){
            esperando++;
            wait(esperaC);
        }else{
            cantPLibres--;
        }
        pop(pLibres, idP);
    }

    // PROFESOR
    procedure proximo(pId: in int){
        push(pLibres, pId);
        if(esperando > 0) {
            esperando--;
            signal(esperaC);
        } else {
            cantPLibres++;
        }
    }

    procedure incrementarRendidos(cant: out int){
        int cant;
        cantRendidos++;
        cant = cantRendidos;
    }
}

Monitor Escritorio [eId:1..3]
{
    int notaE;
    cond vcProfesor, vcAlumno;
    boolean listo = false;

    // ALUMNO
    procedure rendir(nota: out int){
        listo = true;
        signal(vcProfesor);
        wait(vcAlumno);
        nota = notaE;
        signal(vcProfesor);
    }

    // PROFESOR
    procedure esperarLLegada(){
        if(not listo) wait(vcProfesor);
    }

    procedure entregarNota(nota: in int, rendidos: out int){
        int cant;
        notaE = nota;
        signal(vcAlumno);
        wait(vcProfesor);
        Mesa.incrementarRendidos(cant);
        listo = false;
        rendidos = cant;
    }
}