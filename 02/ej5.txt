Se debe simular una maratón con C corredores donde en la llegada hay UNA máquinas
expendedoras de agua con capacidad para 20 botellas. Además existe un repositor encargado
de reponer las botellas de la máquina. Cuando los C corredores han llegado al inicio comienza
la carrera. Cuando un corredor termina la carrera se dirigen a la máquina expendedora, espera
su turno (respetando el orden de llegada), saca una botella y se retira. Si encuentra la máquina
sin botellas, le avisa al repositor para que cargue nuevamente la máquina con 20 botellas; espera
a que se haga la recarga; saca una botella y se retira. Nota: maximizar la concurrencia; mientras
se reponen las botellas se debe permitir que otros corredores se encolen.

sem barrera = 0, mutex = 1, turnos[id]= [[C] 0], reponer = 0, lleno = 0;
contador = 0, botellas = 20;
cola c;
libre = true;

process Corredor[id: 1..C]
{
    P(mutex);
    contador = contador + 1;
    if(contador == C){
        for j=1..C -> V(barrera);
    }
    V(mutex);
    P(barrera);
    -- correr
    P(mutex);
    if(libre){
        if(botellas == 0){
            V(mutex);
            V(reponer);
            P(lleno);
        }
        P(mutex);
        botellas--;
        libre=false;
        V(mutex);
    }else{
        c.push(id);
        V(mutex);
        P(turnos[id]);
        P(mutex);
        if(botellas == 0){
            V(mutex);
            V(reponer);
            P(lleno);
        }
        P(mutex);
        botellas--;
        V(mutex);
    }

    P (mutex);
    if (empty(c)) libre = true
    else { 
        aux = c.pop(); 
        V(turnos[aux]);
    };
    V (mutex);
}

process Repositor
{
    while(true){
        P(reponer);
        P(mutex);
        botellas = 20;
        V(mutex);
        V(lleno);
    }
}





P(mutex);
cant++;
if(cant == C){
    for[1..C] V(espera);
}
V(mutex);
V(espera);
-- correr
P(mutex)
if(libre){
    if(botellas == 0){
        V(mutex);
        V(reponer);
        P(lleno);
    }
    P(mutex);
    libre = false;
    botellas--;
    V(mutex);
}else {
    P(mutex);
    c.push(id);
    
}
